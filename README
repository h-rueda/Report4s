Thank you for using Report4s.
Report4s is a Selenium HTML reporter for the TestNG framework.
It is compatible with both Selenium 2 and Selenium 3.

Report4s is able to automatically log the following webdriver events :

* Select.deselectByIndex(int)
* Select.deselectByValue(java.lang.String)
* Select.deselectByVisibleText(java.lang.String)
* Select.selectByIndex(int)
* Select.selectByValue(java.lang.String)
* Select.selectByVisibleText(java.lang.String)

* WebDriver.get(java.lang.String)
* WebDriver.navigate().back()
* WebDriver.navigate().forward()
* WebDriver.navigate().refresh()
* WebDriver.navigate().to(java.lang.String)
* WebDriver.navigate().to(java.net.URL)

* WebElement.click()
* WebElement.sendKeys(CharSequence[])

You have also the possibility to log custom messages with either a full web page or a web element screenshot.


**********************************************************************
*                       The zip file contents                        *
**********************************************************************

report4.zip
|---javadoc                    The API documentation
|---report4s.properties        Configuration file (optional)
|---lib
    |---report4s.jar                 The report4s library
    
    |---commons-io-2.5.jar           Required external libraries
    |---common-lang-3-3.12.0.jar     


**********************************************************************
*                            Requirements                            *
**********************************************************************

- Java 8 or later
- testng 7.8.0 or later
- Selenium 4


**********************************************************************
*                              Caution                               *
**********************************************************************

DO NOT RENAME THE report4s JAR FILE.

**********************************************************************
*                            Installation                            *
**********************************************************************

- Add the jar files to the classpath.
- Add report4s.properties file to your project root folder (optional).


**********************************************************************
*                   TestNG XML files configuration                   *
**********************************************************************

Add the following lines before the closing </suite> tag
in each TestNG XML file :

<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >
<suite name="..." >
   ...
   ...
   <listeners>
      <listener class-name="net.sourceforge.report4s.ConfigurationListener" />
      <listener class-name="net.sourceforge.report4s.TestListener" />
      <listener class-name="net.sourceforge.report4s.SuiteListener" />
      <listener class-name="net.sourceforge.report4s.ReportIndex" />
   </listeners>
</suite>


**********************************************************************
*                       The packages to import                       *
**********************************************************************

import net.sourceforge.report4s.*;

or

import net.sourceforge.report4s.EventHandler;
import net.sourceforge.report4s.Report4s;
import net.sourceforge.report4s.Level;


**********************************************************************
*                       The test configuration                       *
**********************************************************************

We need to wrap the WebDriver into an Event Listener

import com.github.report4s.DriverListener;

public class MyTest {
 
    private WebDriver driver;
    private EventFiringWebDriver driver;
    
    @BeforeSuite(alwaysRun=true)
    public void setUp() {
        WebDriver raw_driver;
        
        // Initialize raw_driver as instance of FirefoxDriver, or ChromeDriver, or EdgeDriver, etc.
        
        DriverListener listener = new DriverListener();
        this.driver = new EventFiringDecorator<WebDriver>(listener).decorate(raw_driver);
        this.driver.manage().window().maximize();
    }

    // Your test methods go here.
    
    @AfterSuite
    public void tearDown() {
        this.driver.quit();
    }   
}


**********************************************************************
*                             How to log                             *
**********************************************************************

The log levels are :

PASSED, FAILED, SKIPPED, INFO, WARNING, ERROR, DEBUG and TRACE

----------------------------------------------------------------------

To log a custom message without screenshot:

Report4s.logMessage(Level.*, description);

----------------------------------------------------------------------

To log a custom message with a page screenshot :

Report4s.logMessage(Level.*, description, driver);

----------------------------------------------------------------------

To log custom message with a WebElement screenshot :

Report4s.logMessage(Level.*, description, driver, webelement);

----------------------------------------------------------------------

For WebElement screenshots you have the possibility to apply an extra padding

Report4s.logMessage(Level.*, description, driver, webelement, padding);


replace * by PASSED, FAILED, SKIPPED, INFO, WARNING, ERROR, DEBUG or TRACE


**********************************************************************
*                          Sample Java code                          *
**********************************************************************

The Report4s logs screenshots upon webdriver events.

If the screenshots gathering is deactivated, screenshots can still
be taken by making explicit class to Report4s.LogMessage method.

@Test(description = "My test description")
public void test1() {

    this.driver.get("http://www.example.com");
    Report4s.logMessage(Level.PASSED, "Log with screenshot", this.driver);

    WebElement elem;
    elem = this.driver.findElement(By.name("xxxx"));
    elem.sendKeys("Hello World !!");

    elem = this.driver.findElement(By.id("xxxx"));
    elem.click();

    Select sel = new Select(this.driver.findElement(By.name("xxxx")));
    sel.selectByValue("xxxx");
    Report4s.logMessage(Level.INFO, "Log without screenshot");

    this.driver.navigate().back();
}


**********************************************************************
*                      report4s.properties file                      *
**********************************************************************

#IF YOU WANT TO MODIFY A PROPERTY DEFAULT VALUE,
#UNCOMMENT THE APPROPRIATE LINE AND SET THE VALUE OF YOUR CHOICE.


#The report directory relative to the workspace (working directory).
#It is advisable to avoid using the same TestNG default report directory (test-output).
#report4s.report.dir=report


#The file name of the report homepage.
#report4s.report.homepage=index.html


#The title of the report home page.
#report4s.report.title=Test Execution Summary


#The screenshots to gather.
#Values: all, last, failed or none.
#report4s.screenshots.enabled=all


#Whether to take screenshots of WebElements or pages.
#Values: page or element.
#report4s.screenshots.target=page


#Padding in pixels to be applied to WebElement screenshots.
#Defines the area around the WebElement to be included in the screenshot.
#report4s.screenshots.padding=10


#The number of decimals of precision to be displayed in execution time labels.
#The value should be an integer between 0 and 3.
#report4s.time.precision=0


#Whether to display tooltips with the execution result for each individual suite.
#report4s.suite.tooltips.enabled=true


#Whether to skip the remaining tests of the current suite if a test fails.
#report4s.execution.skipSuiteAfterTestFailure=true


**********************************************************************
*                            Limitations                             *
**********************************************************************

No support for HtmlUnitDriver webdriver.

No support for multi-threaded tests.

